<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.configx.web.dao.ConfigItemHistoryMapper">
  <resultMap id="BaseResultMap" type="com.configx.web.model.ConfigItemHistory">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="revision" jdbcType="BIGINT" property="revision" />
    <result column="last_revision" jdbcType="BIGINT" property="lastRevision" />
    <result column="app_id" jdbcType="INTEGER" property="appId" />
    <result column="app_name" jdbcType="VARCHAR" property="appName" />
    <result column="env_id" jdbcType="INTEGER" property="envId" />
    <result column="env_name" jdbcType="VARCHAR" property="envName" />
    <result column="profile_id" jdbcType="INTEGER" property="profileId" />
    <result column="profile_name" jdbcType="VARCHAR" property="profileName" />
    <result column="config_id" jdbcType="BIGINT" property="configId" />
    <result column="config_name" jdbcType="VARCHAR" property="configName" />
    <result column="config_value_id" jdbcType="BIGINT" property="configValueId" />
    <result column="config_value_type" jdbcType="TINYINT" property="configValueType" />
    <result column="config_tags" jdbcType="VARCHAR" property="configTags" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.configx.web.model.ConfigItemHistory">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="config_value" jdbcType="LONGVARCHAR" property="configValue" />
  </resultMap>
  <sql id="Blob_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    config_value
  </sql>
  <insert id="insert" parameterType="com.configx.web.model.ConfigItemHistory">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into `config_item_history` (revision, last_revision, app_id, 
      app_name, env_id, env_name, 
      profile_id, profile_name, config_id, 
      config_name, config_value_id, config_value_type, 
      config_tags, create_time, config_value
      )
    values (#{revision,jdbcType=BIGINT}, #{lastRevision,jdbcType=BIGINT}, #{appId,jdbcType=INTEGER}, 
      #{appName,jdbcType=VARCHAR}, #{envId,jdbcType=INTEGER}, #{envName,jdbcType=VARCHAR}, 
      #{profileId,jdbcType=INTEGER}, #{profileName,jdbcType=VARCHAR}, #{configId,jdbcType=BIGINT}, 
      #{configName,jdbcType=VARCHAR}, #{configValueId,jdbcType=BIGINT}, #{configValueType,jdbcType=TINYINT}, 
      #{configTags,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{configValue,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.configx.web.model.ConfigItemHistory">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into `config_item_history`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="revision != null">
        revision,
      </if>
      <if test="lastRevision != null">
        last_revision,
      </if>
      <if test="appId != null">
        app_id,
      </if>
      <if test="appName != null">
        app_name,
      </if>
      <if test="envId != null">
        env_id,
      </if>
      <if test="envName != null">
        env_name,
      </if>
      <if test="profileId != null">
        profile_id,
      </if>
      <if test="profileName != null">
        profile_name,
      </if>
      <if test="configId != null">
        config_id,
      </if>
      <if test="configName != null">
        config_name,
      </if>
      <if test="configValueId != null">
        config_value_id,
      </if>
      <if test="configValueType != null">
        config_value_type,
      </if>
      <if test="configTags != null">
        config_tags,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="configValue != null">
        config_value,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="revision != null">
        #{revision,jdbcType=BIGINT},
      </if>
      <if test="lastRevision != null">
        #{lastRevision,jdbcType=BIGINT},
      </if>
      <if test="appId != null">
        #{appId,jdbcType=INTEGER},
      </if>
      <if test="appName != null">
        #{appName,jdbcType=VARCHAR},
      </if>
      <if test="envId != null">
        #{envId,jdbcType=INTEGER},
      </if>
      <if test="envName != null">
        #{envName,jdbcType=VARCHAR},
      </if>
      <if test="profileId != null">
        #{profileId,jdbcType=INTEGER},
      </if>
      <if test="profileName != null">
        #{profileName,jdbcType=VARCHAR},
      </if>
      <if test="configId != null">
        #{configId,jdbcType=BIGINT},
      </if>
      <if test="configName != null">
        #{configName,jdbcType=VARCHAR},
      </if>
      <if test="configValueId != null">
        #{configValueId,jdbcType=BIGINT},
      </if>
      <if test="configValueType != null">
        #{configValueType,jdbcType=TINYINT},
      </if>
      <if test="configTags != null">
        #{configTags,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="configValue != null">
        #{configValue,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  
  <select id="getByConfigRevision" resultMap="BaseResultMap">
    select * from `config_item_history` where revision=#{revision} and config_id=#{configId}
  </select>

  <select id="getByConfigNameRevision" resultMap="BaseResultMap">
    select * from `config_item_history` where revision=#{revision} and config_name=#{configName}
  </select>

  <select id="getByRevision" resultMap="BaseResultMap">
    select * from `config_item_history` where revision=#{revision}
  </select>
  
  <select id="getByRevisions" resultMap="BaseResultMap">
    select * from `config_item_history` where revision in
    <foreach close=")" collection="list" index="index" item="item" open="(" separator=",">
        #{item}
    </foreach>
  </select>
  
  <select id="getByRevisionRange" resultMap="BaseResultMap">
  <![CDATA[
    select * from `config_item_history` where app_id=#{appId} and env_id=#{envId} and revision > #{from} and revision <= #{to}
  ]]>
  </select>
  
  <select id="getByAppId" resultMap="BaseResultMap">
    select * from `config_item_history` where app_id=#{appId}
  </select>
  
  <select id="getByAppAndEnv" resultMap="BaseResultMap">
    select * from `config_item_history` where app_id=#{appId} and env_id=#{envId}
  </select>
  
  <select id="getByConfigId" resultMap="BaseResultMap">
    select * from `config_item_history` where config_id=#{configId}
  </select>
  
  <select id="getByConfigName" resultMap="BaseResultMap">
    select * from `config_item_history` where config_name=#{configName}
  </select>

  <select id="countForSearch" resultType="int">
    select count(0) from `config_item_history`
    <where>
      <if test="revision != null">
        AND  revision = #{revision,jdbcType=BIGINT}
      </if>
      <if test="appId != null">
        AND  app_id = #{appId,jdbcType=INTEGER}
      </if>
      <if test="envId != null">
        AND  env_id = #{envId,jdbcType=INTEGER}
      </if>
      <if test="profileId != null">
        AND  profile_id = #{profileId,jdbcType=INTEGER}
      </if>
      <if test="configId != null">
        AND  config_id = #{configId,jdbcType=BIGINT}
      </if>
      <if test="configName != null">
        AND  config_name = #{configName,jdbcType=VARCHAR}
      </if>
    </where>
  </select>

  <select id="search" resultMap="BaseResultMap">
    select * from `config_item_history`
    <where>
      <if test="revision != null">
        AND  revision = #{revision,jdbcType=BIGINT}
      </if>
      <if test="fromRevision != null">
      <![CDATA[
        AND  revision >= #{fromRevision,jdbcType=BIGINT}
      ]]>
      </if>
      <if test="toRevision != null">
        <![CDATA[
        AND  revision <= #{toRevision,jdbcType=BIGINT}
      ]]>
      </if>
      <if test="appId != null">
        AND  app_id = #{appId,jdbcType=INTEGER}
      </if>
      <if test="envId != null">
        AND  env_id = #{envId,jdbcType=INTEGER}
      </if>
      <if test="profileId != null">
        AND  profile_id = #{profileId,jdbcType=INTEGER}
      </if>
      <if test="configId != null">
        AND  config_id = #{configId,jdbcType=BIGINT}
      </if>
      <if test="configName != null">
        AND  config_name = #{configName,jdbcType=VARCHAR}
      </if>
    </where>
    order by revision desc limit #{offset}, #{limit}
  </select>
  
</mapper>